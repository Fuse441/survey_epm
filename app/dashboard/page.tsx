"use client";
import { Card, CardHeader, CardBody, CardFooter } from "@heroui/card";
import React, { useEffect } from "react";
import { Spinner } from "@heroui/spinner";
import {
  Chart as ChartJS,
  RadialLinearScale,
  PointElement,
  LineElement,
  Filler,
  Tooltip,
  Legend,
  ArcElement,
  CategoryScale,
  LinearScale,
  BarElement,
} from "chart.js";
import { Radar, Doughnut, Bar } from "react-chartjs-2";

import { bar, doughnut, radar, topLearn } from "@/config/dashboard";
import { DepartmentIcon, UsersIcon } from "@/components/icons";
import { Chip } from "@heroui/chip";
import { Autocomplete, AutocompleteItem } from "@heroui/autocomplete";

ChartJS.register(
  RadialLinearScale,
  PointElement,
  LineElement,
  BarElement,
  Filler,
  Tooltip,
  Legend,
  ArcElement,
  CategoryScale,
  LinearScale,
);

export default function DashBoardPage() {
  const [result, setResult] = React.useState<any>();
  const [top, setTop] = React.useState<any>();
  const emote = ["ü•á", "ü•à", "ü•â", "üèÖ", "üèÖ"];
  const [total,setTotal] = React.useState<Number>(0);
  const fetchData = async () => {
    try {
      const response = await fetch("/api/data");
      const getTotalUser = await fetch("/api/countUser");
      if (!response.ok || !getTotalUser.ok) {
        throw new Error("Network response was not ok");
      }

      const result = await response.json();
      const total = await getTotalUser.json()
      return {result : result.values,total : total};
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };

  useEffect(() => {
    const fetchAndSetData = async () => {
      const getData = await fetchData();

      
      setResult(getData?.result || []);
      setTotal(getData?.total.values || 0);
       const sort = topLearn(result);

    
       setTop(sort);
    };

    fetchAndSetData();
  }, []);

  const options = {
    indexAxis: "x"  as const,
    // indexAxis: "y", // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡πÅ‡∏ó‡∏ô
  
    scales: {
      x: {
        ticks: {
          display: true, // ‡∏ã‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏î‡∏á label
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô label ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ä‡∏ô‡∏Å‡∏±‡∏ô
          maxRotation: 45,
          minRotation: 0,
        },
        title: {
          display: true,
          text: "‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å", // ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡∏ô X
        },
      },
      y: {
        ticks: {
          beginAtZero: true,
          stepSize: 5,
        },
        title: {
          display: true,
          text: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£", // ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡∏ô Y
        },
      },
    },
  };

  return (
    <div className="w-full">
      <div className="justify-end flex w-full">
      <Autocomplete
  className="max-w-xs"
  label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£"
  placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£"
>
  
  {
   
    result && result.length > 0 ? (
      result.map((element:any, index:number) => (
        element.data.map((item:any, itemIndex:number) => (
          <AutocompleteItem key={`${index}-${itemIndex}`}>{item.label}</AutocompleteItem>
        ))
      ))
    ) : (
      <AutocompleteItem>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</AutocompleteItem> // fallback value when no data is available
    )
  }
</Autocomplete>

      </div>
      
      <div className="text-start my-5">
        <h1 className="font-bold text-4xl">Dashboard Workforce Skill Development Platform</h1>
      </div>    <div className="headers flex gap-4 mb-5">
  <Card className="pl-3 w-[250px] text-center">
    <CardHeader className="flex justify-center items-center gap-2">
      <UsersIcon size={24} className="text-blue-500" />
      <p>‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
    </CardHeader>
    <CardBody>
      {!total ? (
            <div className="flex items-center justify-center">
              <Spinner classNames={{ label: "text-foreground mt-4" }} label="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" variant="simple" />
            </div>
          ): <p className="font-bold text-2xl">{ String(total)} ‡∏Ñ‡∏ô</p>}
    </CardBody>
  </Card>

  <Card className="pl-3 w-[250px] text-center">
    <CardHeader className="flex justify-center items-center gap-2">
      <DepartmentIcon size={24} className="text-green-500" />
      <p >‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
    </CardHeader>
    <CardBody>
      <p className="font-bold text-2xl">10 ‡πÅ‡∏ú‡∏ô‡∏Å</p>
    </CardBody>
  </Card>
</div>

<div className="grid grid-cols-5 grid-rows-6 gap-4 ">
  {/* Radar Chart */}
  <div className="col-span-3 row-span-1 flex items-center justify-center">
    <Card className="py-4 w-full h-full">
      <CardHeader className="pb-0 pt-2 px-4 flex-col items-start">
        <p className="text-tiny uppercase font-bold">Skill Overview</p>
        <small className="text-default-500" />
        <h4 className="font-bold text-large">Department Skill</h4>
      </CardHeader>
      <CardBody className="overflow-visible py-2 flex items-center">
        <div className="flex w-[400px] justify-center">
          {!result ? (
            <div className="flex items-center justify-center">
              <Spinner classNames={{ label: "text-foreground mt-4" }} label="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" variant="simple" />
            </div>
          ) : (
            <div className="w-full ">
            <Radar data={radar(result)} />
           
          
          
        </div>
        

          )}
        </div>
      </CardBody>
      <CardFooter className="flex flex-col gap-4 w-full">
  {/* Section: Skill Tags */}
  <div className="w-full">
    <p className="text-sm font-semibold mb-2">‡∏≠‡∏±‡∏ï‡∏£‡∏≤ (‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞) ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô </p>
    <div className="w-full flex flex-wrap gap-2">
      {radar(result).datasets[0].data.map((item, index) => (
        <Chip color="danger" key={index} className="hover:scale-105 ease-out duration-300">
          {radar(result).labels[index]} : {item.toFixed(2)}
        </Chip>
      ))}
    </div>
  </div>

  {/* Section: Description */}
  <div className="w-full text-start text-sm text-default-600 leading-relaxed">
    <p>
      ‡∏Å‡∏£‡∏≤‡∏ü‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å‡∏Ñ‡∏ß‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏°‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ï‡πà‡∏≤‡∏á ‡πÜ
      ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡πÉ‡∏î‡∏ö‡πâ‡∏≤‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏≥‡∏°‡∏≤‡∏Ñ‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏†‡∏≤‡∏û‡∏ß‡πà‡∏≤‡πÅ‡∏ú‡∏ô‡∏Å‡πÑ‡∏´‡∏ô‡∏Ñ‡∏ß‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    </p>
  </div>
</CardFooter>

    </Card>
  </div>

  {/* Doughnut Chart */}
  <div className="col-start-4 col-span-5 row-span-1 flex items-center justify-center">
    <Card className="py-4 w-full h-full">
      <CardHeader className="pb-0 pt-2 px-4 flex-col items-start">
        <p className="text-tiny uppercase font-bold">Skill Overview</p>
        <small className="text-default-500" />
        <h4 className="font-bold text-large">Hard Skill & Soft Skill & Recommand Course</h4>
      </CardHeader>
      <CardBody className="overflow-visible py-2">
        <div className="flex justify-center w-[300px] h-full">
          {!result ? (
            <div className="flex items-center justify-center">
              <Spinner classNames={{ label: "text-foreground mt-4" }} label="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" variant="simple" />
            </div>
          ) : (
            <Doughnut data={doughnut(result)} />
          )}
        </div>
      </CardBody>
      <CardFooter>
        <p className="text-start text-sm text-default-600 leading-relaxed">
        ‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (Hard Skill, Soft Skill ‡πÅ‡∏•‡∏∞ Recommended Course)
  ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏î‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏° 
  ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡∏£‡∏á‡∏à‡∏∏‡∏î

        </p>
      </CardFooter>
    </Card>
  </div>

  {/* Top Courses to Learn */}
  <div className="col-span-8  row-span-1 flex items-center justify-center h-[45%]">
    <Card className="py-4 w-full min-h-full">
      <CardHeader className="pb-0 pt-2 px-4 flex-col items-start">
        <p className="text-xl uppercase font-bold">Top 5 Departments That Need to Learn the Most Skills</p>
        <small className="text-default-500" />
      </CardHeader>
      <CardBody className="overflow-visible py-2 px-5">
        <div className="flex flex-col ">
          {!result? (
            <div className="flex items-center justify-center">
              <Spinner classNames={{ label: "text-foreground mt-4" }} label="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" variant="simple" />
            </div>
          ) : (
            
         
            top.map((item:any, index:number) => {
              return (
                <span key={index} className="text-xl">
                  {emote[index]} {item.department} : {item.score}
                </span>
              );
            })
         
          )}
        </div>
      </CardBody>
      <CardFooter>
        <p className="text-start text-sm text-default-600 leading-relaxed">
          ‡πÅ‡∏™‡∏î‡∏á 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å
          ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏à‡∏≤‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        </p>
      </CardFooter>
    </Card>
  </div>

  {/* Bar Chart */}
  <div className=" col-span-8 col-start-1 row-start-2 flex items-center justify-center">
    <Card className="py-4 w-full h-full">
      <CardHeader className="pb-0 pt-2 px-4 flex-col items-start">
        <p className="text-tiny uppercase font-bold">Skill Overview</p>
        <small className="text-default-500" />
        <h4 className="font-bold text-large">Department Skill</h4>
      </CardHeader>
      <CardBody className="overflow-visible py-2">
        <div className="flex justify-start">
          {!result ? (
            <div className="flex items-center justify-center">
              <Spinner classNames={{ label: "text-foreground mt-4" }} label="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" variant="simple" />
            </div>
          ) : (
            <Bar data={bar(result)} options={options} />
          )}
        </div>
      </CardBody>
      <CardFooter>
        <p className="text-start text-sm text-default-600 leading-relaxed">
          ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å
          ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
          ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
        </p>
      </CardFooter>
    </Card>
  </div>
</div>

    </div>
  );
}
